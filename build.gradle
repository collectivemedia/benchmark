apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'pitest'
apply plugin: 'jacoco'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "http://nexus.collective-media.net/content/groups/public/"
    }
}

dependencies {
    // jetty
    compile group: 'org.eclipse.jetty', name: 'jetty-client', version: '9.0.5.v20130815'
    compile group: 'com.google.guava', name: 'guava', version: '15.0'

    // test deps
    testCompile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.0.5.v20130815'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.9.5'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'org.easytesting', name: 'fest-assert-core', version: '2.0M10'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

clean.doLast {
    project.delete('generated')
}

artifacts {
    archives sourcesJar
}

buildscript {

    repositories {
        mavenCentral()
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/[organisation]/[module]/[module]-[revision].[ext]'
        }
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'GitHub'
            addArtifactPattern 'http://cloud.github.com/downloads/szpak/[module]/[module]-[revision].[ext]'
        }
    }
    dependencies {
        classpath 'com.github.abirmingham:gradle-jacoco-plugin:1.2'
        classpath 'org.jacoco:org.jacoco.agent:0.6.2.201302030002'
        classpath 'org.jacoco:org.jacoco.ant:0.6.2.201302030002'
        classpath 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:0.30.0'
        classpath "org.pitest:pitest:0.30"
    }


}

test {
    jvmArgs '-XX:+UseParallelGC'
    testLogging.exceptionFormat = "full"
    beforeTest { descriptor ->
        logger.lifecycle("" + descriptor)
    }
}



pitest {
    targetClasses = ['com.collective.*']
    threads = 1 // I think we need to set this to 1 to make sure it does not run tests in parallel
    timestampedReports = false
}

// from http://daniel.gredler.net/2011/08/08/gradle-keeping-libraries-up-to-date/
// Find any 3rd party libraries which have released new versions
// to the central Maven repo since we last upgraded.
task findUpdates << {
    def checked = [:]
    allprojects {
        configurations.each { configuration ->
            configuration.allDependencies.each { dependency ->
                def version = dependency.version
                if (!version)
                    return;
                if (!version.contains('SNAPSHOT') && !checked[dependency]) {
                    def group = dependency.group
                    def path = group.replace('.', '/')
                    def name = dependency.name
                    final groovy.lang.GString url = "http://repo1.maven.org/maven2/$path/$name/maven-metadata.xml"
                    try {
                        def metadata = new XmlSlurper().parseText(url.toURL().text)
                        def versions = metadata.versioning.versions.version.collect { it.text() }
                        versions.removeAll { it.toLowerCase().contains('alpha') }
                        versions.removeAll { it.toLowerCase().contains('beta') }
//                        versions.removeAll { it.toLowerCase().contains('rc') }
                        def newest = versions.max()
                        if (version != newest) {
                            println "$group:$name $version -> $newest"
                        }
                    } catch (FileNotFoundException e) {
                        logger.debug "Unable to download $url: $e.message"
                    } catch (org.xml.sax.SAXParseException e) {
                        logger.debug "Unable to parse $url: $e.message"
                    }
                    checked[dependency] = true
                }
            }
        }
    }
}

def repoUser = 'dummy';
if (hasProperty('nexusUser')) {
    repoUser = nexusUser
}
def repoPw = 'dummy';
if (hasProperty('nexusPassword')) {
    repoPw = nexusPassword
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "http://nexus.collective-media.net/content/repositories/snapshots") {
                authentication(userName: repoUser, password: repoPw)
            }
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.7'
}
